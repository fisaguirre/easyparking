version: '3'
services:
  user-parking-control-service:
    image: fain1995/user-parking-control-service:back
    #specifies the build configuration for creating container image
    build:
      #defines either a path to a directory containing a Dockerfile, or a url to a git repository.
      context: ./user-parking-control-service
      #the "dockerfile" is necessary otherwise it will generate an error
      #we specific the dockerfile name
      dockerfile: Dockerfile
    links:
      - db_user_parking_control_service
    #ports (running:listening)
    ports:
      - "5000:5000"
    #name of image instance (container)
    container_name: user-parking-control-service
    volumes:
      #- ./user-parking-control-service:/app/user-parking-control-service
      #se guardarà un volumen en el host de la computadora relacionado al container user-parking, 
      #este volumen esta dentro de esta misma carpeta
      - ./user-parking-control-service:/user-parking-control-service
    networks:
      - user_parking_control

  db_user_parking_control_service:
    container_name: db_user_parking_control_service
    #image: Like the FROM instruction from the Dockerfile. Instead of writing a new Dockerfile, we are using an existing image from a repository. It’s important to specify the version — if your installed mysql client is not of the same version problems may occur.
    #this image is from dockerhub
    #image: mysql:5.7
    image: fain1995/db_user_parking_control_service:db
    restart: always
    build:
      #defines either a path to a directory containing a Dockerfile, or a url to a git repository.
      context: ./db-user
      #the "dockerfile" is necessary otherwise it will generate an error
      #we specific the dockerfile name
      dockerfile: Dockerfile
    #ports: Since I already have a running mysql instance on my host using this port, I am mapping it to a different one. Notice that the mapping is only from host to container, so our app service container will still use port 3306 to connect to the database.
    ports:
      - "32000:3306"
    #environment: add environment variables. The specified variable is required for this image, and as its name suggests, configures the password for the root user of MySQL in this container. More variables are specified here.
    environment:
      MYSQL_ROOT_PASSWORD: Fernandoroot2023.
      #MYSQL_DATABASE: podcast

      #volumes: since we want the container to be initialized with our schema, we wire the directory containing our init.sql script to the entry point for this container, which by the image’s specification runs all .sql scripts in the given directory.
    volumes:
      - ./db_user_parking_control_service:/docker-entrypoint-initdb.d/:ro
    networks:
      - user_parking_control

  frontend:
    image: fain1995/frontend:front
    #specifies the build configuration for creating container image
    build:
      #defines either a path to a directory containing a Dockerfile, or a url to a git repository.
      context: ./frontend
      #the "dockerfile" is necessary otherwise it will generate an error
      #we specific the dockerfile name
      dockerfile: Dockerfile
    #ports (running:listening)
    ports:
      - "3000:3000"
    #name of image instance (container)
    container_name: frontend
    volumes:
      - ./frontend:/app/
      - /app/frontend/node_modules

networks:
  user_parking_control:


volumes:
  #nombre para el volumen
  user_parking_control_service_app:
  db_user_parking_control_service:
  frontend:
